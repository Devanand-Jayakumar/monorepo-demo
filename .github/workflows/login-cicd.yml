
name: eventExp CI/CD Workflow

on:
  push:
    branches: [main]
    paths:
      - 'apps/eventExp/**'
      - 'apps/eventExp-e2e/**'
  pull_request:
    paths:
      - 'apps/eventExp/**'
      - 'apps/eventExp-e2e/**'
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, stage, prod)'
        required: true
        type: choice
        options:
          - dev
          - stage
          - prod
      application:
        description: 'Application to deploy'
        required: true
        default: 'eventExp'

permissions:
  contents: write
  pages: write
  id-token: write

env:
  application: 'eventExp'

jobs:
  build:
    name: Build, Lint, E2E Test, coverage, Sonar and Allure Report
    runs-on: ubuntu-latest

    
    # Then use that version in the matrix strategy
    strategy:
      matrix:
        node-version: ['${{ steps.node-version.outputs.node_version }}']
        app: [eventExp]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get Node.js version from package.json
        id: node-version
        run: |
          NODE_VERSION=$(node -p "require('./package.json').volta.node")
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "Using Node.js version: $NODE_VERSION"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Detect affected projects
        id: affected
        run: |
          AFFECTED=$(npx nx show projects --affected --base=origin/main --head=HEAD)
          echo "Affected projects: $AFFECTED"
          echo "affected=$AFFECTED" >> $GITHUB_OUTPUT

      - name: Lint if affected
        if: contains(steps.affected.outputs.affected, matrix.app)
        run: yarn nx lint ${{ matrix.app }}

      - name: Test if affected
        if: contains(steps.affected.outputs.affected, matrix.app)
        run: yarn nx test ${{ matrix.app }} --coverage

      - name: Enforce coverage > 95%
        if: contains(steps.affected.outputs.affected, matrix.app)
        run: |
          COVERAGE=$(node -p "require('./coverage/apps/eventExp/coverage-summary.json').total.lines.pct")
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold"
            exit 1
          fi

#       - name: SonarQube Scan
#         if: contains(steps.affected.outputs.affected, 'eventExp')
#         uses: sonarsource/sonarqube-scan-action@v1
#         with:
#           projectBaseDir: apps/eventExp
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Build App
      #   if: contains(steps.affected.outputs.affected, 'eventExp')
      #   run: yarn build eventExp

      - name: Get App Name from Package
        id: get-app-name
        run: |
          FULL_NAME=$(node -p "require('./apps/eventExp/package.json').name")
          APP_NAME=${FULL_NAME##*/}  # Extract everything after the last slash
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Build App
        if: contains(steps.affected.outputs.affected, steps.get-app-name.outputs.app_name)
        run: yarn nx build ${{ steps.get-app-name.outputs.app_name }}

#       - name: Run Cypress E2E Tests
#         if: contains(steps.affected.outputs.affected, 'eventExp')
#         run: yarn nx run eventExp-e2e:e2e

      # - name: Install Allure CLI
      #   run: yarn global add allure-commandline

      # - name: Generate Allure Reports
      #   if: always()
      #   run: |
      #     yarn allure generate apps/eventExp-e2e/allure-results --clean -o apps/eventExp-e2e/allure-report

      # - name: Upload Allure Report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: allure-report
      #     path: apps/eventExp-e2e/allure-report

      # - name: Download Allure report artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: allure-report
      #     path: allure-report

      # - name: Set datetime-based folder name
      #   id: time
      #   run: |
      #     REPORT_FOLDER=$(date +'%Y-%m-%d_%H-%M')
      #     echo "REPORT_FOLDER=$REPORT_FOLDER" >> $GITHUB_ENV

      # - name: Deploy Allure report to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: '${{ secrets.GITHUB_TOKEN }}'
      #     publish_dir: ./allure-report
      #     destination_dir: '${{ env.REPORT_FOLDER }}'
      #     keep_files: true

      # - name: Build reports.json
      #   run: |
      #     git fetch origin gh-pages
      #     git checkout origin/gh-pages -- .
      #     node -e "
      #     const fs = require('fs');
      #     const dirs = fs.readdirSync('.', { withFileTypes: true })
      #       .filter(d => d.isDirectory()).map(d => d.name)
      #       .filter(name => /^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}$/.test(name));
      #     fs.writeFileSync('reports.json', JSON.stringify(dirs.sort().reverse(), null, 2));
      #     "

      # - name: Prepare site files
      #   run: |
      #     mkdir -p site-publish
      #     cp reports.json site-publish/

      # - name: Deploy reports.json
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./site-publish
      #     keep_files: true

  deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'DEV' }}
    steps:
      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets['CLOUDFLARE_PROJECT_NAME_EVENTEXP'] }}
          directory: dist/apps/eventExp
          branch: main

      - name: Output CDN URL
        run: |
          echo "CDN URL: https://cdn-dev-d1q.pages.dev"


